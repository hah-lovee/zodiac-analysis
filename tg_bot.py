import telebot

import csv
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

token = os.environ['TOKEN']

bot = telebot.TeleBot(token)

user_states = {}

QUESTIONS = [
    "Question 1: What is 2 + 2?",
    "Question 2: enter a number from 1 to 5",
    "Question 3: enter a number from 1 to 5",
    "Question 4: enter a number from 1 to 5",
    # "Question 5: enter a number from 1 to 5",
    # "Question 6: enter a number from 1 to 5",
    # "Question 7: enter a number from 1 to 5",
    # "Question 8: enter a number from 1 to 5",
    # "Question 9: enter a number from 1 to 5",
    # "Question 10: enter a number from 1 to 5",

]

@bot.message_handler(commands=['start'])
def start(message):
    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    # markup.add(btn1)
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç. –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ /help")


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.from_user.id, "/start ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞\n/help ‚Äî –í—ã–≤–æ–¥–∏—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç\n/test ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç")

@bot.message_handler(commands=['test'])
def test(message):
    user_states[message.chat.id] = {'current_question': 0}
    user_states[message.chat.id]['answers'] = []
    ask_next_question(message.chat.id)

def ask_next_question(chat_id):
    question_number = user_states[chat_id]['current_question']
    if question_number < len(QUESTIONS):
        question = QUESTIONS[question_number]
        bot.send_message(chat_id, question)
        user_states[chat_id]['current_question'] += 1
        user_states[chat_id]['waiting_for_answer'] = True
    else:
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!")
        user_states[chat_id]['waiting_for_answer'] = False
        print(user_states[chat_id]['answers'])

        with open("data.csv", mode="a", encoding='utf-8') as w_file:
            file_writer = csv.writer(w_file, delimiter = ",", lineterminator="\r")
            file_writer.writerow(user_states[chat_id]['answers'])
        user_states[chat_id]['answers'] = []



@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('waiting_for_answer'))
def reply_with_answer(message):
    chat_id = message.chat.id
    user_answer = message.text
    # –°–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ç–∫ –±—É–¥—É—Ç –µ—â—ë –æ—Ç–≤–µ—Ç—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫(–ø–æ–ª –∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞)
    if user_answer.isdigit() and int(user_answer) in range(1,6):
        user_states[chat_id]['answers'].append(user_answer)
    else:
        user_states[chat_id]["current_question"] -= 1
        bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
    

    ask_next_question(chat_id)


@bot.message_handler(func=lambda message: True)
def handle_unrecognized_commands(message):
    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# @bot.message_handler(content_types=['text'])  #—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# def text(message):
#     pass

bot.polling(none_stop=True)